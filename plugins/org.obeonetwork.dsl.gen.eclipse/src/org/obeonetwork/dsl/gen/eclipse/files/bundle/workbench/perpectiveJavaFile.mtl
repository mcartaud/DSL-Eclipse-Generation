[comment encoding = UTF-8 /]
[module perpectiveJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::path /]

[template private perspectiveJavaFile(aPerspective : Perspective)]
[aPerspective.eContainer(Bundle).genBundleQualifiedPath()/]/ui/perspectives/[aPerspective.name.replaceAll(' ', '').toUpperFirst()/].java
[/template]

[template public genPerspectiveJavaFile(aPerspective : Perspective)]
[file (perspectiveJavaFile(), false, 'UTF-8')]
package [aPerspective.eContainer(Bundle).genBundlePath()/].ui.perspectives;

import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.ui.IFolderLayout;
import org.eclipse.ui.IPageLayout;
import org.eclipse.ui.IPerspectiveFactory;
import org.eclipse.ui.console.IConsoleConstants;
import org.eclipse.ui.progress.IProgressConstants;


/**
 *  This class is meant to serve as an example for how various contributions 
 *  are made to a perspective. Note that some of the extension point id's are
 *  referred to as API constants while others are hardcoded and may be subject 
 *  to change. 
 */
public class [aPerspective.name.replaceAll(' ', '').toUpperFirst()/] implements IPerspectiveFactory {


	/**
	 * Constructor.
	 */
	public [aPerspective.name.replaceAll(' ', '').toUpperFirst()/]() {
		super();
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.ui.IPerspectiveFactory#createInitialLayout(org.eclipse.ui.IPageLayout)
	 */
	public void createInitialLayout(IPageLayout layout) {
		final float oneQuarter = 0.25f;
		final float threeQuarter = 0.75f;

		String editorArea = layout.getEditorArea();

		IFolderLayout leftFolder = layout.createFolder("left", IPageLayout.LEFT, oneQuarter, editorArea); //$NON-NLS-1$
		leftFolder.addView(JavaUI.ID_PACKAGES);

		IFolderLayout bottomFolder = layout.createFolder(
				"bottom", IPageLayout.BOTTOM, threeQuarter, editorArea); //$NON-NLS-1$
[for (aView : View | aPerspective.views)]
		bottomFolder.addView("[aView.eContainer(Bundle).genBundlePath()/].ui.views.[aView.name.substituteAll(' ', '').toUpperFirst()/]"); //$NON-NLS-1$
[/for]
		bottomFolder.addView(IPageLayout.ID_PROBLEM_VIEW);
		bottomFolder.addPlaceholder(IConsoleConstants.ID_CONSOLE_VIEW);
		bottomFolder.addPlaceholder(IProgressConstants.PROGRESS_VIEW_ID);

		layout.addView(IPageLayout.ID_OUTLINE, IPageLayout.RIGHT, threeQuarter, editorArea);

		layout.addActionSet(JavaUI.ID_ACTION_SET);
		layout.addActionSet(JavaUI.ID_ELEMENT_CREATION_ACTION_SET);
		layout.addActionSet(IPageLayout.ID_NAVIGATE_ACTION_SET);

		// views - java
		layout.addShowViewShortcut(JavaUI.ID_PACKAGES);

		// views - console
		layout.addShowViewShortcut(IConsoleConstants.ID_CONSOLE_VIEW);

		// views - workbench
		layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);
		layout.addShowViewShortcut(IPageLayout.ID_PROBLEM_VIEW);

		// actions - creation wizard
[for (aWizard : Wizard | aPerspective.wizards)]
		layout.addNewWizardShortcut("[aWizard.ancestors(Bundle).genBundlePath()/].ui.wizards.[aWizard.name.substituteAll(' ', '').toUpperFirst()/]"); //$NON-NLS-1$
[/for]

	}

}
[/file]
[/template]