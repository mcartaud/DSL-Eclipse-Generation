[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module newWizardJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]

[template private newWizardJavaFile(aWizard : Wizard)]
[aWizard.eContainer(Bundle).genBundleJavaPath()/]/wizards/[aWizard.name.toUpperFirst()/].java
[/template]

[template public gennewWizardJavaFile(aWizard : Wizard)]
[file (newWizardJavaFile(), false, 'UTF-8')]
package [aWizard.ancestors(Bundle).genBundleID()/].wizards;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PlatformUI;
[for (aNature : Nature | aWizard.ancestors(Bundle).natures)][if (aWizard.oclIsKindOf(ProjectWizard))]
import [aWizard.ancestors(Bundle).genBundleID()/].nature.[aNature.name.toUpperFirst()/];
[/if][/for][if (aWizard.oclIsKindOf(ProjectWizard))]
import org.eclipse.core.resources.IProject;
[else]
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.resources.IFile;
[/if]

public class [aWizard.name.toUpperFirst()/] extends Wizard implements INewWizard{

[if (aWizard.oclIsKindOf(ProjectWizard))]
	private [aWizard.name.toUpperFirst()/]ProjectPage [aWizard.name.toLowerFirst()/]ProjectPage;
[else]
	private [aWizard.name.toUpperFirst()/]FilePage [aWizard.name.toLowerFirst()/]FilePage;
	private IStructuredSelection selection;
[/if]

	public [aWizard.name.toUpperFirst()/]() {
		super();		
		setNeedsProgressMonitor(true);
		setWindowTitle("[aWizard.title/]");
	}
	
	@Override
	public void addPages() {
[if (aWizard.oclIsKindOf(ProjectWizard))]
		[aWizard.name.toLowerFirst()/]ProjectPage = new [aWizard.name.toUpperFirst()/]ProjectPage();
		addPage([aWizard.name.toLowerFirst()/]ProjectPage);
[else]
		[aWizard.name.toLowerFirst()/]FilePage = new [aWizard.name.toUpperFirst()/]FilePage("[aWizard.title/]" , selection);
		addPage([aWizard.name.toLowerFirst()/]FilePage);
[/if]	
	}

	@Override
	public boolean performFinish() {
[if (aWizard.oclIsKindOf(ProjectWizard))]
		String projectName = [aWizard.name.toLowerFirst()/]ProjectPage.getProjectName();
		final IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
		if (!project.exists()) {
[else]
		IPath filePath = [aWizard.name.toLowerFirst()/]FilePage.getContainerFullPath();
		final IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(filePath);
		if (!file.exists()) {
[/if]	
			IRunnableWithProgress runnable = new IRunnableWithProgress() {

				public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
					try {
						[for (aNature : Nature | aWizard.ancestors(Bundle).natures)][if (aWizard.oclIsKindOf(ProjectWizard))]
						[aNature.name.toUpperFirst()/] [aNature.name.toLowerFirst()/] = new [aNature.name.toUpperFirst()/]();
						[aNature.name.toLowerFirst()/].setProject(project);
						[aNature.name.toLowerFirst()/].configure();[/if][/for]

						[if (aWizard.oclIsKindOf(ProjectWizard))]	
						project.create(monitor);
						project.open(monitor);
						[else]
						InputStream inputStream = new ByteArrayInputStream("".getBytes());
						file.create(inputStream, true, monitor);
						[/if]
					} catch (CoreException e) {
						e.printStackTrace();
					}					
				}
			};
			try {
				PlatformUI.getWorkbench().getProgressService().run(false, false, runnable);
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return true;
	}


	public void init(IWorkbench arg0, IStructuredSelection selection) {
		[if (aWizard.oclIsKindOf(ProjectWizard))]
		// TODO Auto-generated method stub	
		[else]
		this.selection = selection;
		[/if]
	}

}
[/file]
[/template]