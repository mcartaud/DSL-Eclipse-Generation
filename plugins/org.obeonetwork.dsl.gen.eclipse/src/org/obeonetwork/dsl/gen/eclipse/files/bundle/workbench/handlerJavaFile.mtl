[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module handlerJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]

[template private handlerJavaFile(anHandler : Handler)]
[anHandler.eContainer(Bundle).genBundleJavaPath()/]/handlers/[anHandler.name.replaceAll(' ', '_').toUpperFirst()/].java
[/template]

[template public genHandlerJavaFile(anHandler : Handler)]
[file (handlerJavaFile(), false, 'UTF-8')]
package [anHandler.eContainer(Bundle).genBundleID()/].handlers;


import org.eclipse.jface.dialogs.MessageDialog;
[anHandler.genImport()/]


[anHandler.genHeader()/]
	
	/**
	 * The constructor.
	 */
	public [anHandler.name.replaceAll(' ', '_').toUpperFirst()/]() {
		super();
	}

[anHandler.genBody()/]

}
[/file]
[/template]

[template private genImport(anHandler : Handler)]
[if (anHandler.eInverse(Command).eInverse(ToolbarContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution)->size() > 0)]
import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.handlers.HandlerUtil;
[/if][if (anHandler.oclIsKindOf(ContextualHandler))]
import org.eclipse.jface.viewers.ISelection;
[/if][if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 
or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.action.IAction;
import org.eclipse.ui.IWorkbenchPart;
[/if][if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0)]
import org.eclipse.ui.IObjectActionDelegate;
[/if][if (anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]
import org.eclipse.ui.IEditorActionDelegate;
import org.eclipse.ui.IEditorPart;
[/if]

[/template]

[template private genHeader(anHandler : Handler)]
[if (anHandler.eInverse(Command).eInverse(ToolbarContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution)->size() > 0)]
/**
 * Our sample handler extends AbstractHandler, an IHandler base class.
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
[/if]
public class [anHandler.name.replaceAll(' ', '_').toUpperFirst()/] [anHandler.genSuperType()/]{
[/template]

[template private genSuperType(anHandler : Handler)]
[if (anHandler.eInverse(Command).eInverse(ToolbarContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution)->size() > 0)]extends AbstractHandler [/if][if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]implements[anHandler.genImplementSuperType()/][/if]
[/template]

[template private genImplementSuperType(anHandler : Handler)]
[if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0 and (anHandler.eInverse(MenuContribution).editors->size() > 0 
or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0))] IObjectActionDelegate, IEditorActionDelegate [elseif (anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 
or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)] IEditorActionDelegate [elseif (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0)] IObjectActionDelegate [/if]
[/template]

[template private genBody(anHandler : Handler)]
[if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0 or 
anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]

	private IWorkbenchPart targetPart;

	/**
	 * @see IObjectActionDelegate#setActivePart(IAction, IWorkbenchPart)
	 */
	public void setActivePart(IAction action, IWorkbenchPart part) {
		this.targetPart = part;
	}

	/**
	 * @see IActionDelegate#run(IAction)
	 */
	public void run(IAction action) {
		MessageDialog.openInformation(
			targetPart.getSite().getShell(),
			"[anHandler.eContainer(Bundle).genBundleID()/]",
			"Running [anHandler.name/]!");
	}
[/if]

[if (anHandler.eInverse(Command).eInverse(PopupMenuContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 or 
anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]
	/**
	 * @see IActionDelegate#selectionChanged(IAction, ISelection)
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}
[/if]

[if (anHandler.eInverse(Command).eInverse(MenuContribution).editors->size() > 0 or anHandler.eInverse(Command).eInverse(ToolbarContribution).editors->size() > 0)]
	public void setActiveEditor(IAction action, IEditorPart editor) {
		this.targetPart = editor;
	}
[/if]

[if (anHandler.eInverse(Command).eInverse(ToolbarContribution)->size() > 0 or anHandler.eInverse(Command).eInverse(MenuContribution)->size() > 0)]

	/**
	 * the command has been executed, so extract extract the needed information
	 * from the application context.
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		MessageDialog.openInformation(
				window.getShell(),
				"[anHandler.eContainer(Bundle).genBundleID()/]",
				"Running [anHandler.name/]!");
		return null;
	}

[/if]
[/template]