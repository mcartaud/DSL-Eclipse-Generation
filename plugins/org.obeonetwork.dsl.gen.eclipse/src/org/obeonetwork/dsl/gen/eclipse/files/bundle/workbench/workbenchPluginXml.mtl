[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module workbenchPluginXml('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]
[import org::obeonetwork::dsl::gen::eclipse::files::bundle::workbench::menuPluginXml /]
[import org::obeonetwork::dsl::gen::eclipse::services::findPlatform /]



[template public genWorkbenchPluginXml(aBundle : Bundle)]
[if (aBundle.commands->size() > 0)]
   <extension
         point="org.eclipse.ui.commands">
[if (aBundle.commands.category->size() > 0)][for (aCategory : Category | aBundle.categories)][aCategory.commandCategory()/]
[/for][/if]
[for (aCommand : Command | aBundle.commands)][aCommand.commandTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.commands.handlers->size() > 0)]
   <extension
         point="org.eclipse.ui.handlers">
[for (aCommand : Command | aBundle.commands)][aCommand.handlerTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.bindings->size() > 0)]
   <extension
         point="org.eclipse.ui.bindings">
[for (aBinding : Binding | aBundle.bindings)][aBinding.bindingTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.eAllContents(View)->size() > 0)]
   <extension 
         point="org.eclipse.ui.views">
[for (aCategory : Category | aBundle.categories)][if (aCategory.views->size() > 0)]
[aCategory.commandCategory()/]
[/if][/for]
[for (aView : View | aBundle.eAllContents(View))][aView.viewTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.editors->size() > 0)]
   <extension
         point = "org.eclipse.ui.editors">
[for (anEditor : Editor | aBundle.editors)][anEditor.editorTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.menuContributions->size() > 0 or aBundle.toolbarContributions->size() > 0 or aBundle.popupMenuContributions->size() > 0)]
[aBundle.menuTemplate()/]
[/if][if (aBundle.perspectives->size() > 0)]
   <extension
         point="org.eclipse.ui.perspectives">
[for (aPerspective : Perspective | aBundle.perspectives)][aPerspective.perspectiveTemplate()/]
[/for]
   </extension>
[/if][if ((aBundle.perspectives->select(aPerspective : Perspective | aPerspective.views.eContainer(Bundle)=aPerspective.eContainer(Bundle)))->size() > 0 or aBundle.perspectives.wizards->size() > 0)]
   <extension
         point="org.eclipse.ui.perspectiveExtensions">
[aBundle.perspectives->select(aPerspective : Perspective | not(aPerspective.views.eContainer(Bundle)=aPerspective.eContainer(Bundle)) or aPerspective.wizards->size() > 0).perspectiveExtensionTemplate()/]
   </extension>
[/if][comment][if (aBundle.eAllContents(Editor).menus->size() > 0 or aBundle.eAllContents(Editor).handlers->size() > 0)]
   <extension
         point = "org.eclipse.core.expressions.definitions">
[for (anHandler : Handler | aBundle.eAllContents(Editor).eAllContents(Handler))][anHandler.editorActionDefinition()/]
[/for]
   </extension>
[/if][/comment][if (aBundle.contexts->size() > 0)]
   <extension
		 point="org.eclipse.ui.contexts">
[for (aContext : Context | aBundle.eAllContents(Context))][aContext.contextDefinition()/]
[/for]
   </extension>
[/if]
[/template]



[template private perspectiveTemplate(aPerspective : Perspective)]
      <perspective
            name="%Perspective-[aPerspective.refactorPerspectiveName().toUpperFirst()/]-Name"
            icon="icons/[aPerspective.iconName()/]"
            class="[aPerspective.genPerspectivePath()/]"
            id="[aPerspective.genPerspectiveID()/]">
      </perspective>
[/template]

[template private perspectiveExtensionTemplate(aPerspective : Perspective)]
  	  <perspectiveExtension 
			targetID="[aPerspective.genPerspectiveID()/]">
[for (aView : View | aPerspective.views)][if (not(aView.eContainer(Bundle)=aPerspective.eContainer(Bundle)) and aView.isVisible)]
    		<view id="[aView.genViewID()/]" 
        		relative="org.eclipse.ui.views.ProblemView" 
    			relationship="stack"/>	
[/if][/for][for (aWizard : Wizard | aPerspective.wizards)]
      		<newWizardShortcut
            		id="[aWizard.genWizardID()/]">
      		</newWizardShortcut>	
[/for]
 	  </perspectiveExtension>
[/template]

[template private commandTemplate(aCommand : Command)]
      <command
            name="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Name"
			defaultHandler="[aCommand.defaultHandler.genHandlerPath()/]"
[if (aCommand.category->size() > 0)]
            categoryId="[aCommand.category.genCategoryID()/]"
[/if]
            id="[aCommand.genCommandID()/]">
      </command>
[/template]

[template private commandCategory(aCategory : Category)]
      <category
            name="%[aCategory.categoryName()/]"
            id="[aCategory.genCategoryID()/]">
      </category>
[/template]

[template private categoryName(aCategory : Category)]
[if (aCategory.views->size() > 0)]
View-[aCategory.refactorCategoryName().toUpperFirst()/]-Category-Name[elseif (aCategory.commands->size() > 0)]
Command-[aCategory.commands->first().refactorCommandName().toUpperFirst()/]-Category-Name
[elseif (aCategory.wizards->size() > 0)]Wizard-[aCategory.wizards->first().refactorWizardName().toUpperFirst()/]-Category-Name[/if]
[/template]

[template private handlerTemplate(aCommand : Command)]
[for (anHandler : Handler | aCommand.handlers)]
      <handler
            commandId="[aCommand.genCommandID()/]"
            class="[anHandler.genHandlerPath()/]">
      </handler>
[/for]
[/template]

[template private bindingTemplate(aBinding : Binding)]
      <key
            commandId="[aBinding.command.genCommandID()/]"
[for (aContext : Context | aBinding.contexts)]
            contextId="[aContext.genContextID()/]"
[/for]
            sequence="[aBinding.bindingKey()/]"
            schemeId="org.eclipse.ui.defaultAcceleratorConfiguration">
      </key>
[/template]

[template private bindingKey(aBinding : Binding)]
[aBinding.keySequence.replaceAll(' ', '').tokenize('+').genSpecialCharater()->sep('+')/]
[/template]

[template private genSpecialCharater(aString : String)]
[if ((aString.findPlatform().toString().toLower() = 'linux') or (aString.findPlatform().toString().toLower() = 'windows'))]
[if (aString.toLower().contains('ctrl'))]
[aString.toLower().replace('ctrl', 'M1')/][elseif (aString.toLower().contains('shift'))]
[aString.toLower().replace('shift', 'M2')/][elseif (aString.toLower().contains('alt'))]
[aString.toLower().replace('alt', 'M3')/][else][aString.toLower()/][/if]
[elseif (aString.findPlatform().toString().toLower().startsWith('mac'))]
[if (aString.toLower().contains('command'))]
[aString.toLower().replace('command', 'M1')/][elseif (aString.toLower().contains('shift'))]
[aString.toLower().replace('shift', 'M2')/][elseif (aString.toLower().contains('alt'))]
[aString.toLower().replace('alt', 'M3')/][elseif (aString.toLower().contains('ctrl'))]
[aString.toLower().replace('ctrl', 'M4')/][else][aString.toLower()/][/if]
[/if]
[/template]

[template private viewTemplate(aView : View)]
      <view
[if (aView.category->size() > 0)]
            category="[aView.category.genCategoryID()/]"
[/if]
            class="[aView.genViewPath()/]"
            id="[aView.genViewID()/]"
            icon="icons/[aView.iconName()/]"
			name="%View-[aView.refactorViewName().toUpperFirst()/]-Name">
      </view>
[/template]

[template private editorTemplate(anEditor : Editor)]
      <editor
            class="[anEditor.genEditorPath()/]"
            icon="icons/[anEditor.iconName()/]"
            id="[anEditor.genEditorID()/]"
            name="%Editor-[anEditor.refactorEditorName().toUpperFirst()/]-Name">
      </editor>
[/template]

[template private editorActionDefinition(anHandler : Handler)]
      <definition id="[anHandler.defaultCommand.genDefinitionID()/]">    
         <with variable="activeEditorId">
            <equals value="[anHandler.eContainer(Editor).genEditorID()/]"/>
         </with>
      </definition>
[/template]

[template private contextDefinition(aContext : Context)]
	  <context
		 name="%Context-[aContext.refactorContextName().toUpperFirst()/]-Name"
		 description="%Context-[aContext.refactorContextName().toUpperFirst()/]-Description"
		 id="[aContext.genContextID()/]"[if (aContext.eContainer().oclIsKindOf(Bundle))]>
[else]
	     parentId="[aContext.eContainer(Context).genContextID()/]">
[/if]
	  </context>
[/template]