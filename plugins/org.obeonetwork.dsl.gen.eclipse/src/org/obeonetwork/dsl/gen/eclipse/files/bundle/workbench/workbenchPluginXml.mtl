[comment encoding = UTF-8 /]
[module workbenchPluginXml('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]
[import org::obeonetwork::dsl::gen::eclipse::files::bundle::workbench::menuPluginXml /]



[template public genWorkbenchPluginXml(aBundle : Bundle)]
[if (aBundle.commands->size() > 0)]
   <extension
         point="org.eclipse.ui.commands">
[if (aBundle.commands.category->size() > 0)][for (aCategory : Category | aBundle.categories)][aCategory.commandCategory()/]
[/for][/if]
[for (aCommand : Command | aBundle.commands)][aCommand.commandTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.handlers->size() > 0 or aBundle.perspectives.handlers->size() > 0)]
   <extension
         point="org.eclipse.ui.handlers">
[for (anHandler : Handler | aBundle.eAllContents(Handler))][anHandler.handlerTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.bindings->size() > 0)]
   <extension
         point="org.eclipse.ui.bindings">
[for (aBinding : Binding | aBundle.bindings)][aBinding.bindingTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.eAllContents(View)->size() > 0)]
   <extension 
         point="org.eclipse.ui.views">
[for (aCategory : Category | aBundle.categories)][if (aCategory.views->size() > 0)]
[aCategory.commandCategory()/]
[/if][/for]
[for (aView : View | aBundle.eAllContents(View))][aView.viewTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.editors->size() > 0)]
   <extension
         point = "org.eclipse.ui.editors">
[for (anEditor : Editor | aBundle.editors)][anEditor.editorTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.menus->size() > 0 or aBundle.perspectives.menus->size() > 0)]
[aBundle.menuTemplate()/]
[/if][if (aBundle.perspectives->size() > 0)]
   <extension
         point="org.eclipse.ui.perspectives">
[for (aPerspective : Perspective | aBundle.perspectives)][aPerspective.perspectiveTemplate()/]
[/for]
   </extension>
[/if][if (aBundle.perspectives.handlers->size() > 0 or aBundle.perspectives.menus->size() > 0 or aBundle.perspectives.views->size() > 0 or aBundle.perspectives.wizards->size() > 0)]
   <extension
         point="org.eclipse.ui.perspectiveExtensions">
[aBundle.perspectives->select(aPerspective : Perspective | not(aPerspective.views.eContainer(Bundle)=aPerspective.eContainer(Bundle)) or aPerspective.wizards->size() > 0).perspectiveExtensionTemplate()/]
   </extension>
[/if][if (aBundle.eAllContents(Editor).menus->size() > 0 or aBundle.eAllContents(Editor).handlers->size() > 0)]
   <extension
         point = "org.eclipse.core.expressions.definitions">
[for (anHandler : Handler | aBundle.eAllContents(Editor).eAllContents(Handler))][anHandler.editorActionDefinition()/]
[/for]
   </extension>
[/if][if (aBundle.contexts->size() > 0)]
   <extension
		 point="org.eclipse.ui.contexts">
[for (aContext : Context | aBundle.eAllContents(Context))][aContext.contextDefinition()/]
[/for]
   </extension>
[/if]
[/template]



[template private perspectiveTemplate(aPerspective : Perspective)]
      <perspective
            name="%Perspective-[aPerspective.refactorPerspectiveName().toUpperFirst()/]-Name"
            icon="%Perspective-[aPerspective.refactorPerspectiveName().toUpperFirst()/]-Icon"
            class="[aPerspective.genPerspectivePath()/]"
            id="[aPerspective.genPerspectiveID()/]">
      </perspective>
[/template]

[template private perspectiveExtensionTemplate(aPerspective : Perspective)]
  	  <perspectiveExtension 
			targetID="[aPerspective.genPerspectiveID()/]">
[for (aView : View | aPerspective.views)][if (not(aView.eContainer(Bundle)=aPerspective.eContainer(Bundle)) and aView.isVisible)]
    		<view id="[aView.genViewID()/]" 
        		relative="org.eclipse.ui.views.ProblemView" 
    			relationship="stack"/>	
[/if][/for][for (aWizard : Wizard | aPerspective.wizards)]
      		<newWizardShortcut
            		id="[aWizard.genWizardID()/]">
      		</newWizardShortcut>	
[/for]
 	  </perspectiveExtension>
[/template]

[template private commandTemplate(aCommand : Command)]
      <command
            name="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Name"
[if (aCommand.category->size() > 0)]
            categoryId="[aCommand.category.genCategoryID()/]"
[/if]
            id="[aCommand.genCommandID()/]">
      </command>
[/template]

[template private commandCategory(aCategory : Category)]
      <category
            name="%[aCategory.categoryName()/]"
            id="[aCategory.genCategoryID()/]">
      </category>
[/template]

[template private categoryName(aCategory : Category)]
[if (aCategory.views->size() > 0)]
View-[aCategory.refactorCategoryName().toUpperFirst()/]-Category-Name[elseif (aCategory.commands->size() > 0)]
Command-[aCategory.commands->first().refactorCommandName().toUpperFirst()/]-Category-Name
[elseif (aCategory.wizards->size() > 0)]Wizard-[aCategory.wizards->first().refactorWizardName().toUpperFirst()/]-Category-Name[/if]
[/template]

[template private handlerTemplate(anHandler : Handler)]
      <handler
            commandId="[anHandler.command.genCommandID()/]"
            class="[anHandler.genHandlerPath()/]">
      </handler>
[/template]

[template private bindingTemplate(aBinding : Binding)]
      <key
            commandId="[aBinding.command.genCommandID()/]"
[for (aContext : Context | aBinding.contexts)]
            contextId="[aBinding.command.handler.contexts.genContextID()/]"
[/for]
            sequence="[aBinding.bindingKey()/]"
            schemeId="org.eclipse.ui.defaultAcceleratorConfiguration">
      </key>
[/template]

[template private bindingKey(aBinding : Binding)]
[if (aBinding.keySequence.toLower().contains('ctrl'))]
[aBinding.keySequence.toLower().replace('ctrl', 'M1')/][else][aBinding.keySequence/][/if]
[/template]

[template private viewTemplate(aView : View)]
      <view
[if (aView.category->size() > 0)]
            category="[aView.category.genCategoryID()/]"
[/if]
            class="[aView.genViewPath()/]"
            id="[aView.genViewID()/]"
            icon="%View-[aView.refactorViewName().toUpperFirst()/]-Icon"
			name="%View-[aView.refactorViewName().toUpperFirst()/]-Name">
      </view>
[/template]

[template private editorTemplate(anEditor : Editor)]
      <editor
            class="[anEditor.genEditorPath()/]"
            icon="%Editor-[anEditor.refactorEditorName().toUpperFirst()/]-Icon"
            id="[anEditor.genEditorID()/]"
            name="%Editor-[anEditor.refactorEditorName().toUpperFirst()/]-Name">
      </editor>
[/template]

[template private editorActionDefinition(anHandler : Handler)]
      <definition id="[anHandler.command.genDefinitionID()/]">    
         <with variable="activeEditorId">
            <equals value="[anHandler.eContainer(Editor).genEditorID()/]"/>
         </with>
      </definition>
[/template]

[template private contextDefinition(aContext : Context)]
	  <context
		 name="%Context-[aContext.refactorContextName().toUpperFirst()/]-Name"
		 description="%Context-[aContext.refactorContextName().toUpperFirst()/]-Description"
		 id="[aContext.genContextID()/]"[if (aContext.eContainer().oclIsKindOf(Bundle))]>[else]
	     parentId="[aContext.eContainer(Context).genContextID()/]">
[/if]
	  </context>
[/template]