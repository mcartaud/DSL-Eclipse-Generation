[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module menuPluginXml('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template public menuTemplate(aBundle : Bundle)]
   <extension
         point="org.eclipse.ui.menus">
[for (aMenu : MenuContribution | aBundle.menuContributions)]
[if (aMenu.perspectives->size() > 0)]
[aMenu.perspectiveMenuContribution()/]
[/if][if (aMenu.editors->size() > 0)]
[aMenu.editorMenuContribution()/]
[/if][if (aMenu.views->size() > 0)]
[aMenu.viewMenuContribution()/]
[/if][if (aMenu.perspectives->size() = 0 and aMenu.editors->size() = 0 and aMenu.views->size() = 0)]
[aMenu.globalMenuContribution()/]
[/if]
[/for][for (aToolbar : ToolbarContribution | aBundle.toolbarContributions)]
[if (aToolbar.perspectives->size() > 0)]
[aToolbar.perspectiveToolbarContribution()/]
[/if][if (aToolbar.editors->size() > 0)]
[aToolbar.editorToolbarContribution()/]
[/if][if (aToolbar.views->size() > 0)]
[aToolbar.viewToolbarContribution()/]
[/if][if (aToolbar.perspectives->size() = 0 and aToolbar.editors->size() = 0 and aToolbar.views->size() = 0)]
[aToolbar.globalToolbarContribution()/]
[/if]
[/for]
   </extension>
[/template]

[template private globalToolbarContribution(aToolbar : ToolbarContribution)]
      <menuContribution
            locationURI="toolbar:org.eclipse.ui.main.toolbar?after=additions">
[aToolbar.genGlobalToolbarContribution()/]
      </menuContribution>
[/template]

[template private genGlobalToolbarContribution(aToolbar : ToolbarContribution)]
[for (aToolbar)]
         <toolbar
               id="[aToolbar.genToolbarID()/]">
[for (aCommand : Command | aToolbar.commands)]
[aCommand.genGlobalToolbarCommand()/]
[/for]
         </toolbar>
[/for]
[/template]

[template private genGlobalToolbarCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
                  tooltip="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].toobars.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/template]

[template private globalMenuContribution(aMenu : MenuContribution)]
      <menuContribution
            locationURI="menu:org.eclipse.ui.main.menu?after=additions">
[aMenu.genGlobalMenuContribution()/]
      </menuContribution>
[/template]

[template private genGlobalMenuContribution(aMenu : MenuContribution)]
[for (aMenu)][if (not(aMenu.name.oclIsUndefined()))]
         <menu
               label="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.genMenuID()/]">
[/if][for (aCommand : Command | aMenu.commands)]
[aCommand.genGlobalMenuCommand()/]
[/for]
[for (aSecondMenu : MenuContribution | aMenu.menuContributions)]
[aSecondMenu.genMenuContribution()/]
[/for]
[if (not(aMenu.name.oclIsUndefined()))]
         </menu>
[/if][/for]
[/template]

[template private genGlobalMenuCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/template]

[template private perspectiveToolbarContribution(aToolbar : ToolbarContribution)]
[for (aPerspective : Perspective | aToolbar.perspectives)]
      <menuContribution
            locationURI="toolbar:org.eclipse.ui.main.toolbar?after=additions">
[aToolbar.genToolbarContribution()/]
      </menuContribution>
[/for]
[/template]

[template private editorToolbarContribution(aToolbar : ToolbarContribution)]
[for (anEditor : Editor | aToolbar.editors)]
      <menuContribution
            locationURI="toolbar:[anEditor.genEditorID()/]?after=additions">
[aToolbar.genToolbarContribution()/]
      </menuContribution>
[/for]
[/template]

[template private viewToolbarContribution(aToolbar : ToolbarContribution)]
[for (aView : View | aToolbar.views)]
      <menuContribution
            locationURI="toolbar:[aView.genViewID()/]?after=additions">
[for (aCommand : Command | aToolbar.commands)]
[aCommand.genToolbarCommand()/]
[/for]
      </menuContribution>
[/for]
[/template]

[template private perspectiveMenuContribution(aMenu : MenuContribution)]
[for (aPerspective : Perspective | aMenu.perspectives)]
      <menuContribution
            locationURI="menu:org.eclipse.ui.main.menu?after=additions">
[aMenu.genMenuContribution()/]
      </menuContribution>
[/for]
[/template]

[template private editorMenuContribution(aMenu : MenuContribution)]
[for (anEditor : Editor | aMenu.editors)]
      <menuContribution
            locationURI="menu:[anEditor.genEditorID()/]?after=additions">
[aMenu.genMenuContribution()/]
      </menuContribution>
[/for]
[/template]

[template private viewMenuContribution(aMenu : MenuContribution)]
[for (aView : View | aMenu.views)]
      <menuContribution
            locationURI="menu:[aView.genViewID()/]?after=additions">
[aMenu.genMenuContribution()/]
      </menuContribution>
[/for]
[/template]


[template private genToolbarContribution(aToolbar : ToolbarContribution)]
[for (aToolbar)]
         <toolbar
               id="[aToolbar.genToolbarID()/]">
[for (aCommand : Command | aToolbar.commands)]
[aCommand.genToolbarCommand()/]
[/for]
         </toolbar>
[/for]
[/template]

[template private genToolbarCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
                  tooltip="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].toobars.[aCommand.refactorCommandName().toLowerFirst()/]">
[if (aCommand.defaultHandler->size() > 0)]
[for (anHandler : DefaultHandler | aCommand.defaultHandler)]
[anHandler.activateHandler()/]
[/for]
[elseif (aCommand.handlers->size() > 0)]
[for (anHandler : ContextualHandler | aCommand.handlers)]
[anHandler.activateHandler()/]
[/for]
[/if]
            </command>
[/template]

[template private genMenuContribution(aMenu : MenuContribution)]
[for (aMenu)][if (not(aMenu.name.oclIsUndefined()))]
         <menu
               label="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.genMenuID()/]">
[/if][if (aMenu.eInverse(MenuContribution)->size() = 0)][for (aCommand : Command | aMenu.commands)]
[aCommand.genMenuCommand()/]
[/for][/if]
[for (aSecondMenu : MenuContribution | aMenu.menuContributions)]
[aSecondMenu.genMenuContribution()/]
[/for]
[if (not(aMenu.name.oclIsUndefined()))]
         </menu>
[/if][/for]
[/template]

[template private genMenuCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
[if (aCommand.defaultHandler->size() > 0)]
[for (aHandler : DefaultHandler | aCommand.defaultHandler)]
[aHandler.activateHandler()/]
[/for]
[elseif (aCommand.handlers->size() > 0)]
[for (aHandler : ContextualHandler | aCommand.handlers)]
[aHandler.activateHandler()/]
[/for]
[/if]
            </command>
[/template]

[template private activateHandler(aHandler : DefaultHandler)]
[if (aHandler.eContainer(Command).eInverse(MenuContribution).perspectives->size() > 0 or aHandler.eContainer(Command).eInverse(MenuContribution).editors->size() > 0)]
[aHandler.activateMenuHandler()/]
[elseif (aHandler.eContainer(Command).eInverse(ToolbarContribution).perspectives->size() > 0 or aHandler.eContainer(Command).eInverse(ToolbarContribution).editors->size() > 0)]
[aHandler.activateToolbarHandler()/]
[/if]
[/template]

[template private activateHandler(aHandler : ContextualHandler)]
[if (aHandler.commands.eInverse(MenuContribution).perspectives->size() > 0 or aHandler.commands.eInverse(MenuContribution).editors->size() > 0)]
[aHandler.activateMenuHandler()/]
[elseif (aHandler.commands.eInverse(ToolbarContribution).perspectives->size() > 0 or aHandler.commands.eInverse(ToolbarContribution).editors->size() > 0)]
[aHandler.activateToolbarHandler()/]
[/if]
[/template]

[template private activateMenuHandler(aHandler : DefaultHandler)]
            <visibleWhen checkEnabled="false">
[if (aHandler.eContainer(Command).eInverse(MenuContribution).perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
[for (aPerspective : Perspective | aHandler.eContainer(Command).eInverse(MenuContribution).perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
            	</with>
[/if][if (aHandler.eContainer(Command).eInverse(MenuContribution).editors->size() > 0)]
            	<with variable="activeWorkbenchWindow.activeEditor">
[for (anEditor : Editor | aHandler.eContainer(Command).eInverse(MenuContribution).editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
            	</with>
[/if]
         	</visibleWhen>
[/template]

[template private activateToolbarHandler(aHandler : DefaultHandler)]
            <visibleWhen checkEnabled="false">
[if (aHandler.eContainer(Command).eInverse(ToolbarContribution).perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
[for (aPerspective : Perspective | aHandler.eContainer(Command).eInverse(ToolbarContribution).perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
            	</with>
[/if][if (aHandler.eContainer(Command).eInverse(ToolbarContribution).editors->size() > 0)]
            	<with variable="activeWorkbenchWindow.activeEditor">
[for (anEditor : Editor | aHandler.eContainer(Command).eInverse(ToolbarContribution).editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
            	</with>
[/if]
         	</visibleWhen>
[/template]

[template private activateMenuHandler(aHandler : ContextualHandler)]
            <visibleWhen checkEnabled="false">
[if (aHandler.commands.eInverse(MenuContribution).perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
[for (aPerspective : Perspective | aHandler.commands.eInverse(MenuContribution).perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
            	</with>
[/if][if (aHandler.commands.eInverse(MenuContribution).editors->size() > 0)]
            	<with variable="activeWorkbenchWindow.activeEditor">
[for (anEditor : Editor | aHandler.commands.eInverse(MenuContribution).editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
            	</with>
[/if]
         	</visibleWhen>
[/template]

[template private activateToolbarHandler(aHandler : ContextualHandler)]
            <visibleWhen checkEnabled="false">
[if (aHandler.commands.eInverse(ToolbarContribution).perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
[for (aPerspective : Perspective | aHandler.commands.eInverse(ToolbarContribution).perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
            	</with>
[/if][if (aHandler.commands.eInverse(ToolbarContribution).editors->size() > 0)]
            	<with variable="activeWorkbenchWindow.activeEditor">
[for (anEditor : Editor | aHandler.commands.eInverse(ToolbarContribution).editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
            	</with>
[/if]
         	</visibleWhen>
[/template]
