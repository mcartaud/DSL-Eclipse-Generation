[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module menuPluginXml('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template public menuTemplate(aBundle : Bundle)]
   <extension
         point="org.eclipse.ui.menus">
[for (aMenu : Menu | aBundle.eAllContents(Menu))]
[if (aMenu.menuContribution and not(aMenu.eContainer().oclIsKindOf(View)))]
[aMenu.menuContribution()/]
[/if][if (aMenu.toolbarContribution and not(aMenu.eContainer().oclIsKindOf(View)))]
[aMenu.toolbarContribution()/]
[/if][if (aMenu.menuContribution and (aMenu.eContainer().oclIsKindOf(View)))]
[aMenu.viewMenuContribution()/]
[/if][if (aMenu.toolbarContribution and (aMenu.eContainer().oclIsKindOf(View)))]
[aMenu.viewToolbarContribution()/]
[/if]
[/for]
   </extension>
[/template]

[template private menuContribution(aMenu : Menu)]
[if (not(aMenu.eContainer().oclIsKindOf(Menu)))]
      <menuContribution
            locationURI="menu:org.eclipse.ui.main.menu?after=additions">
[/if]
[aMenu.genMenuContribution()/]
[if (not(aMenu.eContainer().oclIsKindOf(Menu)))]
      </menuContribution>
[/if]
[/template]

[template private toolbarContribution(aMenu : Menu)]
[if (not(aMenu.eContainer().oclIsKindOf(Menu)))]
      <menuContribution
            locationURI="toolbar:org.eclipse.ui.main.toolbar?after=additions">
[/if]
[aMenu.genToolbarContribution()/]
[if (not(aMenu.eContainer().oclIsKindOf(Menu)))]
      </menuContribution>
[/if]
[/template]

[template private viewMenuContribution(aMenu : Menu)]
      <menuContribution
            locationURI="menu:[aMenu.eContainer(View).genViewID()/]?after=additions">
[for (aCommand : Command | aMenu.commands)]
[aCommand.genMenuCommand()/]
[/for]
      </menuContribution>
[/template]

[template private viewToolbarContribution(aMenu : Menu)]
      <menuContribution
            locationURI="toolbar:[aMenu.eContainer(View).genViewID()/]?after=additions">
[for (aCommand : Command | aMenu.commands)]
[aCommand.genToolbarCommand()/]
[/for]
      </menuContribution>
[/template]

[template private genMenuContribution(aMenu : Menu)]
[for (aMenu)]
         <menu
               label="[aMenu.name/]"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.eContainer(Bundle).genBundleID()/].menus.[aMenu.refactorMenuName().toLowerFirst()/]">
[for (aCommand : Command | aMenu.commands)]
[aCommand.genMenuCommand()/]
[/for]
         </menu>
[/for]
[/template]

[template private genToolbarContribution(aMenu : Menu)]
[for (aMenu)]
         <toolbar
               id="[aMenu.eContainer(Bundle).genBundleID()/].toolbars.[aMenu.refactorMenuName().toLowerFirst()/]">
[for (aCommand : Command | aMenu.commands)]
[aCommand.genToolbarCommand()/]
[/for]
         </toolbar>
[/for]
[/template]

[template private genToolbarCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
                  tooltip="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].toolbars.[aCommand.refactorCommandName().toLowerFirst()/]">
[for (anHandler : Handler | aCommand.contextHandlers)][if (anHandler.eContainer().oclIsKindOf(Editor))]
[anHandler.activateEditorHandler()/]
[/if][/for]
            </command>
[/template]

[template private genMenuCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
[for (anHandler : Handler | aCommand.contextHandlers)][if (anHandler.eContainer().oclIsKindOf(Editor))]
[anHandler.activateEditorHandler()/]
[/if][/for]
            </command>
[/template]

[template private activateEditorHandler(anHandler : Handler)]
			<visibleWhen
					checkEnabled="true">
     				<reference definitionId="[anHandler.command.genDefinitionID()/]"/>
			</visibleWhen>
[/template]