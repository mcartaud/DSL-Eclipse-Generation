[comment encoding = UTF-8 /]
[module registryListenerJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::path /]

[template private registryListenerJavaFile(anExtensionPoint : ExtensionPoint)]
[anExtensionPoint.eContainer(Bundle).genBundleQualifiedPath()/]/registry/[anExtensionPoint.genExtensionName()/]RegistryListener.java
[/template]

[template public genRegistryListenerJavaFile(anExtensionPoint : ExtensionPoint)]
[file (registryListenerJavaFile(), false, 'UTF-8')]
package [anExtensionPoint.ancestors(Bundle).genBundlePath()/].registry;

import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.IExtensionPoint;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.IRegistryEventListener;
import org.eclipse.core.runtime.Platform;

/**
 * This listener will allow us to be aware of contribution changes against the [anExtensionPoint.name/]
 * extension point.
 * 
 */
public class [anExtensionPoint.genExtensionName()/]RegistryListener implements IRegistryEventListener {
	/** Name of the extension point to parse for extensions. */
	public static final String [anExtensionPoint.staticExtensionName()/]_EXTENSION_POINT = "[anExtensionPoint.ancestors(Bundle).genBundlePath()/].[anExtensionPoint.genExtensionName()/]Extension"; //$NON-NLS-1$
	
	/** Name of the extension point's "[anExtensionPoint.genExtensionName()/]Extension" tag. */
	private static final String [anExtensionPoint.staticExtensionName()/]_TAG_EXTENSION = "[anExtensionPoint.genExtensionName()/]Extension"; //$NON-NLS-1$
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.runtime.IRegistryEventListener#added(org.eclipse.core.runtime.IExtension['['/]])
	 */
	public void added(IExtension['['/]] extensions) {
		for (IExtension extension : extensions) {
			parseExtension(extension);
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.runtime.IRegistryEventListener#added(org.eclipse.core.runtime.IExtensionPoint['['/]])
	 */
	public void added(IExtensionPoint['['/]] extensionPoints) {
		// no need to listen to this event
	}

	/**
	 * Though this listener reacts to the extension point changes, there could have been contributions before
	 * it's been registered. This will parse these initial contributions.
	 */
	public void parseInitialContributions() {
		final IExtensionRegistry registry = Platform.getExtensionRegistry();

		for (IExtension extension : registry.getExtensionPoint([anExtensionPoint.staticExtensionName()/]_EXTENSION_POINT).getExtensions()) {
			parseExtension(extension);
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.runtime.IRegistryEventListener#removed(org.eclipse.core.runtime.IExtension['['/]])
	 */
	public void removed(IExtension['['/]] extensions) {
		for (IExtension extension : extensions) {
			final IConfigurationElement['['/]] configElements = extension.getConfigurationElements();
			for (IConfigurationElement elem : configElements) {
				if ([anExtensionPoint.staticExtensionName()/]_TAG_EXTENSION.equals(elem.getName())) {
					final String extensionClassName = elem
							.getAttribute([anExtensionPoint.genExtensionName()/]ExtensionDescriptor.[anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_EXTENSION);
					[anExtensionPoint.genExtensionName()/]ExtensionRegistry.removeExtension(extensionClassName);
				}
			}
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.runtime.IRegistryEventListener#removed(org.eclipse.core.runtime.IExtensionPoint['['/]])
	 */
	public void removed(IExtensionPoint['['/]] extensionPoints) {
		// no need to listen to this event
	}

	/**
	 * Parses a single extension contribution.
	 * 
	 * @param extension
	 *            Parses the given extension and adds its contribution to the registry.
	 */
	private void parseExtension(IExtension extension) {
		final IConfigurationElement['['/]] configElements = extension.getConfigurationElements();
		for (IConfigurationElement elem : configElements) {
			if ([anExtensionPoint.staticExtensionName()/]_TAG_EXTENSION.equals(elem.getName())) {
				[anExtensionPoint.genExtensionName()/]ExtensionRegistry.addExtension(new [anExtensionPoint.genExtensionName()/]ExtensionDescriptor(elem));
			}
		}
	}
}
[/file]
[/template]