[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module activatorJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]

[template private activatorJavafile(aBundle : Bundle)]
[aBundle.genBundleJavaPath()/]/Activator.java
[/template]

[template public genActivatorJavaFile(aBundle : Bundle)]
[file (activatorJavafile(), false, 'UTF-8')]
package [aBundle.genBundleID()/];

import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;
[if (aBundle.extensionPoints->size() > 0)]import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.Platform;[/if]
[for (anExtensionPoint : ExtensionPoint | aBundle.extensionPoints)]
import [aBundle.genBundleID()/].registry.[anExtensionPoint.genExtensionName()/]ExtensionRegistry;
import [aBundle.genBundleID()/].registry.[anExtensionPoint.genExtensionName()/]RegistryListener;
[/for]
/**
 * The activator class controls the plug-in life cycle
 */
public class Activator extends AbstractUIPlugin {

	/** The plug-in ID */
	public static final String PLUGIN_ID = "[aBundle.genBundleID()/]"; //$NON-NLS-1$

	/** The shared instance */
	private static Activator plugin;
	
[for (anExtensionPoint : ExtensionPoint | aBundle.extensionPoints)]
	/** The registry listener that will be used to listen to [anExtensionPoint.name/] extension changes. */
	private [anExtensionPoint.genExtensionName()/]RegistryListener registryListener = new [anExtensionPoint.genExtensionName()/]RegistryListener();
[/for]

	/**
	 * The constructor
	 */
	public Activator() {
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
[for (anExtensionPoint : ExtensionPoint | aBundle.extensionPoints)]
		final IExtensionRegistry registry = Platform.getExtensionRegistry();
		registry.addListener(registryListener, [anExtensionPoint.genExtensionName()/]RegistryListener.[anExtensionPoint.staticExtensionName()/]_EXTENSION_POINT);
		registryListener.parseInitialContributions();
[/for]
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
[for (anExtensionPoint : ExtensionPoint | aBundle.extensionPoints)]
		final IExtensionRegistry registry = Platform.getExtensionRegistry();
		registry.removeListener(registryListener);
		[anExtensionPoint.genExtensionName()/]ExtensionRegistry.clearRegistry();
[/for]
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static Activator getDefault() {
		return plugin;
	}

	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path
	 *
	 * @param path the path
	 * @return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return imageDescriptorFromPlugin(PLUGIN_ID, path);
	}
}
[/file]
[/template]