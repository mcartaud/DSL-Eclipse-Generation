[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module extensionClientJavaFile('http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template private extensionClientJavaFile(anExtensionPoint : ExtensionPointClient, counter : Integer)]
[anExtensionPoint.eContainer(Bundle).genBundleJavaPath()/]/contributions/[anExtensionPoint.provider.genExtensionName()/][counter/].java
[/template]

[template public genExtensionClientJavaFile(anExtensionPoint : ExtensionPointClient, counter : Integer)]
[file (anExtensionPoint.extensionClientJavaFile(counter), false, 'UTF-8')]
package [anExtensionPoint.eContainer(Bundle).genBundleID()/].contributions;

import [anExtensionPoint.provider.eContainer(Bundle).genBundleID()/].registry.[anExtensionPoint.provider.genExtensionName().toLowerFirst()/].Abstract[anExtensionPoint.provider.refactorExtensionClassName()/]Extension;
import [anExtensionPoint.provider.eContainer(Bundle).genBundleID()/].registry.[anExtensionPoint.provider.genExtensionName().toLowerFirst()/].I[anExtensionPoint.provider.refactorExtensionClassName()/]Extension;
//[protected (': add imports for the extension of ' + anExtensionPoint.provider.genExtensionName() + counter)]
//[/protected]


/**
 * implementation of the extension point's client
 * @generated
 */
public class [anExtensionPoint.provider.genExtensionName()/][counter/] extends Abstract[anExtensionPoint.provider.refactorExtensionClassName()/]Extension implements
		I[anExtensionPoint.provider.refactorExtensionClassName()/]Extension {

//[protected (': add attributes for the extension of ' + anExtensionPoint.provider.genExtensionName() + counter)]
//[/protected]


	/**
	 * the constructor
	 * @generated
	 */
	public [anExtensionPoint.provider.genExtensionName()/][counter/]() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * the implemetation of the interface methods
	 * @generated
	 */
	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}

//[protected (': add methods for the extension of ' + anExtensionPoint.provider.genExtensionName() + counter)]
//[/protected]

}
[/file]
[/template]


[template private extensionClientJavaFile(anExtensionPoint : ExtensionPointClient, anAttribute : JavaAttribute, counter : Integer)]
[anExtensionPoint.eContainer(Bundle).genBundleJavaPath()/]/contributions/[anAttribute.genAttributeClassName()/][counter/].java
[/template]

[template public genExtensionClientJavaFile(anExtensionPoint : ExtensionPointClient, anAttribute : JavaAttribute, counter : Integer)]
[file (anExtensionPoint.extensionClientJavaFile(anAttribute, counter), false, 'UTF-8')]
package [anExtensionPoint.eContainer(Bundle).genBundleID()/].contributions;

import [anExtensionPoint.provider.eContainer(Bundle).genBundleID()/].registry.[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/].Abstract[anAttribute.genAttributeClassName()/]Extension;
import [anExtensionPoint.provider.eContainer(Bundle).genBundleID()/].registry.[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/].I[anAttribute.genAttributeClassName()/]Extension;
//[protected (': add imports for the extension of ' + anAttribute.genAttributeClassName() + counter)]
//[/protected]


/**
 * implementation of the extension point's client
 * @generated
 */
public class [anAttribute.genAttributeClassName()/][counter/] extends Abstract[anAttribute.genAttributeClassName()/]Extension implements
		I[anAttribute.genAttributeClassName()/]Extension {

//[protected (': add attributes for the extension of ' + anAttribute.genAttributeClassName() + counter)]
//[/protected]


	/**
	 * the constructor
	 * @generated
	 */
	public [anAttribute.genAttributeClassName()/][counter/]() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * the implemetation of the interface methods
	 * @generated
	 */
	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}

//[protected (': add methods for the extension of ' + anAttribute.genAttributeClassName() + counter)]
//[/protected]

}
[/file]
[/template]