@Ecore(nsURI="http://www.obeonetwork.org/dsl/eclipse", nsPrefix="eclipse")
@GenModel(editDirectory="/org.obeonetwork.dsl.gen.eclipse.model.edit/src-gen")
@GenModel(editorDirectory="/org.obeonetwork.dsl.gen.eclipse.model.editor/src-gen")
package org.obeonetwork.dsl.gen.eclipse

import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EPackage
//import org.eclipse.emf.codegen.ecore.genmodel.GenClass 

class Application
{
	Name [1] name
	Namespace [1] applicationID
	String provider
	String copyright
	String license
	Version version
	String description
	Namespace [1] baseNamespace
	boolean mavenCompilation
	contains Project [] projects
}

abstract class Project
{
	Name name
	Namespace [1] ID
}

class Repository extends Project {
	contains RepositoryCategory[1..*] repositoryCategories
}

class RepositoryCategory  {
	String [1] label
	String description
	Namespace [1] ID
	refers Feature [1..*] features
}

class Feature extends Project
{
	String copyright
	String description
	Version version
	String license
	String provider
	refers Bundle [1..*] bundles
}

class Bundle extends Project
{
	Version version
	String requiredEnvironment
	String vendor
	contains DeclarativeService[] declarativeServices
	contains ImportedPackageDeclaration [] importedPackageDeclarations
	contains Nature [] natures
	contains Builder [] builders
	contains Wizard [] wizards
	contains ExtensionPoint [] extensionPoints
	contains Decorator [] decorators
	contains Marker [] markers
	contains Perspective [] perspectives
	contains Editor [] editors
	contains View [] views
	contains HelpContents [] helpContents
	contains Command [] commands
	contains Menu [] menus
	contains Handler[] handlers
	contains Context [] contexts
	contains Category [] categories
	contains Binding [] bindings
	refers EPackage [] exportedPackages
	refers EPackage [] ownedPackages
}

class DeclarativeService 
{
	Name [1] name
	refers EClass [1] implentationClass
	contains ProvidedService[] providedServices
	contains RequiredService[] requiredServices
}

class ProvidedService
{
	refers EClass [1] ^interface
}

class RequiredService
{
	Name [1] name	
	Integer lowerBound
	Integer upperBound
	JavaName bind
	refers EClass [1] ^interface
}

class ImportedPackageDeclaration
{
	Namespace [1] packageName
	Version packageVersion
}

class Builder
{
	Name [1] name
	refers Nature [1..*] natures opposite builders
}

class Nature
{
	Name [1] name
	boolean hasToggleNature
	refers Builder [1..*] builders opposite natures
}

class Wizard
{
	Name [1] name
	String title
	String description
	String icon
	boolean isProject
	refers Category category opposite wizards
}

class ProjectWizard extends Wizard
{
	refers Nature [] natures
}

class ExtensionPoint
{
	Name [1] name
	boolean required
	contains Attribute [] attributes
}

class Attribute
{
	Name [1] name
	boolean required
	boolean translatable
	Type ^type
}

class Decorator
{
	Name [1] name
	String icon
	boolean isLightweight
	boolean isAdaptable
	Location location
}

class Marker
{
	Name [1] name
	boolean isPersistant
}

class Context
{
	Name [1] name
	String description
	contains Context [] contexts
}

class Perspective
{
	Name [1] name
	String icon
	contains Handler[] handlers
	contains Menu [] menus
	contains Wizard [] wizards
	refers View [] views opposite perspectives
}

class Category
{
	Name [1] name
	refers Command [] commands opposite category
	refers View [] views opposite category
	refers Wizard [] wizards opposite category
}

abstract class Part
{
	Name [1] name
	String icon
	contains DynamicHelp dynamicHelp
}

class View extends Part
{
	boolean isTree
	boolean isVisible
	contains Handler[] handlers
	contains Menu [] menus
	refers Perspective [] perspectives opposite views
	refers Category category opposite views
}

class Editor extends Part
{
	String extension
	boolean dynamicMenu
	contains Handler[] handlers
	contains Menu [] menus
}

class Menu
{
	Name [1] name
	String mnemonic
	boolean menuContribution
	boolean toolbarContribution
	refers Command [] commands opposite menu
}

class Command
{
	Name [1] name
	String icon
	String tooltip
	refers Handler handler opposite command
	refers Menu menu opposite commands
	refers Category category opposite commands
	refers Binding binding opposite command
}

class Handler
{
	Name [1] name
	String mnemonic
	refers Command command opposite handler
	refers Context[] contexts
}

class HelpContents
{
	Name [1] label
	String description
	contains HelpPage [] helpPages
	refers HelpPage [] externalHelpPages
}

class HelpPage
{
	Name [1] label
	String description
	contains HelpPage [] helpPages
	refers HelpPage [] externalHelpPages
}

class DynamicHelp
{
	Name [1] label
	String description
	refers HelpPage [] helpPages
}

class Binding
{
	String [1] keySequence
	refers Command command opposite binding
	refers Context[] contexts
}

enum Type
{
	string
	^boolean
	java
	resource
	identifier
}

enum Location
{
	BottomRight
	BottomLeft
	TopRight
	TopLeft
	Underlay
	Blank
}


type Version wraps java.lang.String create
{ if ( it != null && ! it . matches ( "\\d+\\.\\d+\\.\\d+" ) ) throw new RuntimeException ( "Bad format for version" )
; return it
}

type Namespace wraps java.lang.String create
{ if ( it != null && ! it . matches ( "([a-z]+([0-9]*[A-Z]*[a-z]*)*\\.)*[a-z]+([0-9]*[A-Z]*[a-z]*)*" ) ) throw new RuntimeException ( "Bad format for ID" )
; return it
}

type JavaName wraps java.lang.String create
{ if ( it != null && ! it . matches ( "[A-Z]+([0-9]*[A-Z]*[a-z]*)*" ) ) throw new RuntimeException ( "Bad format for a java name" )
; return it
}

type Name wraps java.lang.String create
{ if ( it != null && ! it . matches ( "([A-Z]*[a-z]+)+([ ]*[0-9]*[A-Z]*[a-z]*)*" ) ) throw new RuntimeException ( "Bad format for name" )
; return it
}