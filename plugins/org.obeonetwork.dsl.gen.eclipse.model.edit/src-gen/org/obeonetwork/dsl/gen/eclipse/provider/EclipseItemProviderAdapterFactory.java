/**
 */
package org.obeonetwork.dsl.gen.eclipse.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.obeonetwork.dsl.gen.eclipse.util.EclipseAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EclipseItemProviderAdapterFactory extends EclipseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EclipseItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Application} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationItemProvider applicationItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Application}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationAdapter()
  {
    if (applicationItemProvider == null)
    {
      applicationItemProvider = new ApplicationItemProvider(this);
    }

    return applicationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Repository} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RepositoryItemProvider repositoryItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Repository}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRepositoryAdapter()
  {
    if (repositoryItemProvider == null)
    {
      repositoryItemProvider = new RepositoryItemProvider(this);
    }

    return repositoryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Feature} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureItemProvider featureItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Feature}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFeatureAdapter()
  {
    if (featureItemProvider == null)
    {
      featureItemProvider = new FeatureItemProvider(this);
    }

    return featureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Bundle} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BundleItemProvider bundleItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Bundle}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBundleAdapter()
  {
    if (bundleItemProvider == null)
    {
      bundleItemProvider = new BundleItemProvider(this);
    }

    return bundleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.ActionSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionSetItemProvider actionSetItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.ActionSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionSetAdapter()
  {
    if (actionSetItemProvider == null)
    {
      actionSetItemProvider = new ActionSetItemProvider(this);
    }

    return actionSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Menu} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MenuItemProvider menuItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Menu}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMenuAdapter()
  {
    if (menuItemProvider == null)
    {
      menuItemProvider = new MenuItemProvider(this);
    }

    return menuItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Action} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionItemProvider actionItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Action}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionAdapter()
  {
    if (actionItemProvider == null)
    {
      actionItemProvider = new ActionItemProvider(this);
    }

    return actionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.PartCategory} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PartCategoryItemProvider partCategoryItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.PartCategory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPartCategoryAdapter()
  {
    if (partCategoryItemProvider == null)
    {
      partCategoryItemProvider = new PartCategoryItemProvider(this);
    }

    return partCategoryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.View} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewItemProvider viewItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.View}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewAdapter()
  {
    if (viewItemProvider == null)
    {
      viewItemProvider = new ViewItemProvider(this);
    }

    return viewItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Editor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EditorItemProvider editorItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Editor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEditorAdapter()
  {
    if (editorItemProvider == null)
    {
      editorItemProvider = new EditorItemProvider(this);
    }

    return editorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Perspective} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PerspectiveItemProvider perspectiveItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Perspective}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPerspectiveAdapter()
  {
    if (perspectiveItemProvider == null)
    {
      perspectiveItemProvider = new PerspectiveItemProvider(this);
    }

    return perspectiveItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Binding} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BindingItemProvider bindingItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Binding}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBindingAdapter()
  {
    if (bindingItemProvider == null)
    {
      bindingItemProvider = new BindingItemProvider(this);
    }

    return bindingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Help} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HelpItemProvider helpItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Help}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHelpAdapter()
  {
    if (helpItemProvider == null)
    {
      helpItemProvider = new HelpItemProvider(this);
    }

    return helpItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Page} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PageItemProvider pageItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Page}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPageAdapter()
  {
    if (pageItemProvider == null)
    {
      pageItemProvider = new PageItemProvider(this);
    }

    return pageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.ContextualHelp} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextualHelpItemProvider contextualHelpItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.ContextualHelp}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextualHelpAdapter()
  {
    if (contextualHelpItemProvider == null)
    {
      contextualHelpItemProvider = new ContextualHelpItemProvider(this);
    }

    return contextualHelpItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.gen.eclipse.Service} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceItemProvider serviceItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.gen.eclipse.Service}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServiceAdapter()
  {
    if (serviceItemProvider == null)
    {
      serviceItemProvider = new ServiceItemProvider(this);
    }

    return serviceItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (applicationItemProvider != null) applicationItemProvider.dispose();
    if (repositoryItemProvider != null) repositoryItemProvider.dispose();
    if (featureItemProvider != null) featureItemProvider.dispose();
    if (bundleItemProvider != null) bundleItemProvider.dispose();
    if (actionSetItemProvider != null) actionSetItemProvider.dispose();
    if (menuItemProvider != null) menuItemProvider.dispose();
    if (actionItemProvider != null) actionItemProvider.dispose();
    if (partCategoryItemProvider != null) partCategoryItemProvider.dispose();
    if (viewItemProvider != null) viewItemProvider.dispose();
    if (editorItemProvider != null) editorItemProvider.dispose();
    if (perspectiveItemProvider != null) perspectiveItemProvider.dispose();
    if (bindingItemProvider != null) bindingItemProvider.dispose();
    if (helpItemProvider != null) helpItemProvider.dispose();
    if (pageItemProvider != null) pageItemProvider.dispose();
    if (contextualHelpItemProvider != null) contextualHelpItemProvider.dispose();
    if (serviceItemProvider != null) serviceItemProvider.dispose();
  }

}
